"""\nBerxel P100R相机Python接口\n提供简单易用的相机控制API\n\n作者: Zhuo\n日期: 2025-10-15\n"""\n\nimport berxel_wrapper\nimport cv2\nimport numpy as np\n\n\nclass BerxelCamera:\n    """Berxel P100R相机封装类"""\n    \n    def __init__(self):\n        self.initialized = False\n        \n    def initialize(self):\n        """初始化相机"""\n        try:\n            berxel_wrapper.init_camera()\n            self.initialized = True\n            print(\"✅ Berxel相机初始化成功\")\n            return True\n        except Exception as e:\n            print(f\"❌ 相机初始化失败: {str(e)}\")\n            return False\n            \n    def get_frame(self):\n        """获取一帧彩色图像\n        \n        Returns:\n            frame: BGR格式彩色图 (1920x1080x3), 失败返回None\n        """\n        if not self.initialized:\n            print(\"[WARNING] 相机未初始化\")\n            return None\n            \n        try:\n            frame = berxel_wrapper.get_frame()\n            if frame is None:\n                return None\n            \n            # 确保返回BGR格式以兼容OpenCV\n            if frame.shape[2] == 3:\n                return cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)\n            return frame\n            \n        except Exception as e:\n            print(f\"❌ 获取彩色图像失败: {str(e)}\")\n            return None\n            \n    def get_depth(self):\n        """获取一帧深度图像\n        \n        Returns:\n            depth: 深度图 (640x400), 单位:毫米, uint16, 失败返回None\n        """\n        if not self.initialized:\n            print(\"[WARNING] 相机未初始化\")\n            return None\n            \n        try:\n            depth = berxel_wrapper.get_depth()\n            return depth\n            \n        except Exception as e:\n            print(f\"❌ 获取深度图像失败: {str(e)}\")\n            return None\n    \n    def get_depth_meters(self):\n        """获取深度图像（单位：米）\n        \n        Returns:\n            depth: 深度图 (640x400), 单位:米, float32, 失败返回None\n        """\n        depth_mm = self.get_depth()\n        if depth_mm is None:\n            return None\n        \n        # 转换为米\n        return depth_mm.astype(np.float32) / 1000.0\n            \n    def release(self):\n        """释放相机资源"""\n        if self.initialized:\n            try:\n                berxel_wrapper.release_camera()\n                print(\"✅ 相机资源已释放\")\n            except Exception as e:\n                print(f\"❌ 释放相机资源失败: {str(e)}\")\n            finally:\n                self.initialized = False\n\n\ndef main():\n    """测试相机功能"""\n    print(\"=\" * 60)\n    print(\"Berxel P100R 相机测试\")\n    print(\"=\" * 60)\n    \n    # 初始化相机\n    camera = BerxelCamera()\n    if not camera.initialize():\n        print(\"\\n❌ 无法初始化相机，退出\")\n        return\n    \n    print(\"\\n✅ 相机已就绪\")\n    print(\"按 'q' 退出, 'c' 截取彩色图, 'd' 截取深度图\\n\")\n    \n    color_count = 0\n    depth_count = 0\n    \n    try:\n        while True:\n            # 读取彩色图\n            color = camera.get_frame()\n            if color is not None:\n                cv2.imshow('P100R Color', color)\n            \n            # 读取深度图\n            depth = camera.get_depth()\n            if depth is not None:\n                # 可视化深度\n                depth_vis = cv2.applyColorMap(\n                    cv2.normalize(depth, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8),\n                    cv2.COLORMAP_JET\n                )\n                cv2.imshow('P100R Depth', depth_vis)\n            \n            # 按键处理\n            key = cv2.waitKey(1) & 0xFF\n            if key == ord('q'):\n                break\n            elif key == ord('c') and color is not None:\n                color_count += 1\n                filename = f'color_{color_count}.png'\n                cv2.imwrite(filename, color)\n                print(f\"📸 彩色图保存: {filename}\")\n            elif key == ord('d') and depth is not None:\n                depth_count += 1\n                filename = f'depth_{depth_count}.png'\n                cv2.imwrite(filename, depth_vis)\n                print(f\"📸 深度图保存: {filename}\")\n    \n    except KeyboardInterrupt:\n        print(\"\\n\\n用户中断\")\n    \n    finally:\n        camera.release()\n        cv2.destroyAllWindows()\n        print(\"\\n程序结束\")\n\n\nif __name__ == \"__main__\":\n    main()\n