#include <Python.h>\n#include <numpy/arrayobject.h>\n#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\n#include \"BerxelHawkContext.h\"\n#include \"BerxelHawkDevice.h\"\n#include \"BerxelHawkFrame.h\"\n#include \"BerxelHawkDefines.h\"\n#include <iostream>\n\nusing namespace berxel;\n\nstatic berxel::BerxelHawkContext* g_context = nullptr;\nstatic berxel::BerxelHawkDevice* g_device = nullptr;\n\nstatic PyObject* init_camera(PyObject* self, PyObject* args) {\n    try {\n        // 获取Berxel Context\n        g_context = berxel::BerxelHawkContext::getBerxelContext();\n        if (!g_context) {\n            PyErr_SetString(PyExc_RuntimeError, \"Failed to get Berxel context\");\n            return nullptr;\n        }\n        \n        // 查找设备\n        berxel::BerxelHawkDeviceInfo* pDeviceInfo = nullptr;\n        uint32_t deviceCount = 0;\n        if (g_context->getDeviceList(&pDeviceInfo, &deviceCount) != 0 || deviceCount <= 0 || pDeviceInfo == nullptr) {\n            PyErr_SetString(PyExc_RuntimeError, \"No Berxel camera found\");\n            return nullptr;\n        }\n        \n        // 打开第一个设备\n        g_device = g_context->openDevice(pDeviceInfo[0]);\n        if (!g_device) {\n            PyErr_SetString(PyExc_RuntimeError, \"Failed to open camera\");\n            return nullptr;\n        }\n        \n        // 同步系统时间\n        g_device->setSystemClock();\n        \n        // 设置流模式为并行模式（P100R 需要并行模式才能同时使用彩色和深度流）\n        g_device->setStreamFlagMode(berxel::BERXEL_HAWK_MIX_STREAM_FLAG_MODE);\n        \n        // 设置彩色图像模式\n        berxel::BerxelHawkStreamFrameMode colorMode;\n        g_device->getCurrentFrameMode(berxel::BERXEL_HAWK_COLOR_STREAM, &colorMode);\n        colorMode.resolutionX = 1920;\n        colorMode.resolutionY = 1080;\n        colorMode.framerate = 30;\n        if (g_device->setFrameMode(berxel::BERXEL_HAWK_COLOR_STREAM, &colorMode) != 0) {\n            PyErr_SetString(PyExc_RuntimeError, \"Failed to set color frame mode\");\n            return nullptr;\n        }\n        \n        // 设置深度图像模式\n        berxel::BerxelHawkStreamFrameMode depthMode;\n        g_device->getCurrentFrameMode(berxel::BERXEL_HAWK_DEPTH_STREAM, &depthMode);\n        depthMode.resolutionX = 640;\n        depthMode.resolutionY = 400;\n        depthMode.framerate = 30;\n        if (g_device->setFrameMode(berxel::BERXEL_HAWK_DEPTH_STREAM, &depthMode) != 0) {\n            PyErr_SetString(PyExc_RuntimeError, \"Failed to set depth frame mode\");\n            return nullptr;\n        }\n        \n        // 启动彩色和深度图像流\n        if (g_device->startStreams(berxel::BERXEL_HAWK_COLOR_STREAM | berxel::BERXEL_HAWK_DEPTH_STREAM) != 0) {\n            PyErr_SetString(PyExc_RuntimeError, \"Failed to start streams\");\n            return nullptr;\n        }\n        \n        Py_RETURN_NONE;\n    }\n    catch (const std::exception& e) {\n        PyErr_SetString(PyExc_RuntimeError, e.what());\n        return nullptr;\n    }\n}\n\nstatic PyObject* get_frame(PyObject* self, PyObject* args) {\n    try {\n        if (!g_device) {\n            PyErr_SetString(PyExc_RuntimeError, \"Camera not initialized\");\n            return nullptr;\n        }\n        \n        // 获取一帧图像\n        berxel::BerxelHawkFrame* frame = nullptr;\n        if (g_device->readColorFrame(frame, -1) != 0 || !frame) {\n            PyErr_SetString(PyExc_RuntimeError, \"Failed to get frame\");\n            return nullptr;\n        }\n        \n        // 获取图像数据\n        npy_intp dims[3] = {(npy_intp)frame->getHeight(), (npy_intp)frame->getWidth(), 3};\n        PyObject* array = PyArray_SimpleNewFromData(3, dims, NPY_UINT8, (void*)frame->getData());\n        \n        // 释放帧\n        g_device->releaseFrame(frame);\n        \n        return array;\n    }\n    catch (const std::exception& e) {\n        PyErr_SetString(PyExc_RuntimeError, e.what());\n        return nullptr;\n    }\n}\n\nstatic PyObject* release_camera(PyObject* self, PyObject* args) {\n    try {\n        if (g_device) {\n            g_device->stopStreams(berxel::BERXEL_HAWK_COLOR_STREAM | berxel::BERXEL_HAWK_DEPTH_STREAM);\n            g_context->closeDevice(g_device);\n            g_device = nullptr;\n        }\n        \n        if (g_context) {\n            berxel::BerxelHawkContext::destroyBerxelContext(g_context);\n            g_context = nullptr;\n        }\n        \n        Py_RETURN_NONE;\n    }\n    catch (const std::exception& e) {\n        PyErr_SetString(PyExc_RuntimeError, e.what());\n        return nullptr;\n    }\n}\n\nstatic PyObject* get_depth(PyObject* self, PyObject* args) {\n    try {\n        if (!g_device) {\n            PyErr_SetString(PyExc_RuntimeError, \"Camera not initialized\");\n            return nullptr;\n        }\n        \n        // 获取一帧深度图像\n        berxel::BerxelHawkFrame* frame = nullptr;\n        if (g_device->readDepthFrame(frame, -1) != 0 || !frame) {\n            PyErr_SetString(PyExc_RuntimeError, \"Failed to get depth frame\");\n            return nullptr;\n        }\n        \n        // 获取深度图像数据\n        npy_intp dims[2] = {(npy_intp)frame->getHeight(), (npy_intp)frame->getWidth()};\n        PyObject* array = PyArray_SimpleNewFromData(2, dims, NPY_UINT16, (void*)frame->getData());\n        \n        // 释放帧\n        g_device->releaseFrame(frame);\n        \n        return array;\n    }\n    catch (const std::exception& e) {\n        PyErr_SetString(PyExc_RuntimeError, e.what());\n        return nullptr;\n    }\n}\n\nstatic PyMethodDef BerxelMethods[] = {\n    {\"init_camera\", init_camera, METH_NOARGS, \"Initialize Berxel camera\"},\n    {\"get_frame\", get_frame, METH_NOARGS, \"Get a color frame from the camera\"},\n    {\"get_depth\", get_depth, METH_NOARGS, \"Get a depth frame from the camera\"},\n    {\"release_camera\", release_camera, METH_NOARGS, \"Release camera resources\"},\n    {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef berxel_module = {\n    PyModuleDef_HEAD_INIT,\n    \"berxel_wrapper\",\n    NULL,\n    -1,\n    BerxelMethods\n};\n\nPyMODINIT_FUNC PyInit_berxel_wrapper(void) {\n    import_array();\n    return PyModule_Create(&berxel_module);\n}\n